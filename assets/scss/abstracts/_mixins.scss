/**
 * SCSS Mixins
 * Reusable mixins for common patterns
 */

@use "sass:map";

// Responsive breakpoints
@mixin respond-to($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    $value: map.get($breakpoints, $breakpoint);
    @media (min-width: #{$value}) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: #{$breakpoint}";
  }
}

// Container mixin
@mixin container($max-width: var(--container-xl)) {
  width: 100%;
  max-width: $max-width;
  margin-left: auto;
  margin-right: auto;
  padding-left: var(--spacing-4);
  padding-right: var(--spacing-4);

  @media (min-width: 576px) {
    padding-left: var(--spacing-6);
    padding-right: var(--spacing-6);
  }

  @media (min-width: 1024px) {
    padding-left: var(--spacing-8);
    padding-right: var(--spacing-8);
  }
}

// Button reset
@mixin button-reset {
  background: none;
  border: none;
  padding: 0;
  margin: 0;
  cursor: pointer;
  font: inherit;
  color: inherit;
  text-decoration: none;
  outline: none;

  &:focus {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }
}

// Visually hidden (for screen readers)
@mixin visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

// Focus outline
@mixin focus-outline {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}

// Clearfix
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

// Aspect ratio
@mixin aspect-ratio($width, $height) {
  position: relative;
  overflow: hidden;

  &::before {
    content: '';
    display: block;
    padding-top: percentage($height / $width);
  }

  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
}

// Transition
@mixin transition($properties: all, $duration: var(--transition-normal), $timing: ease) {
  transition: $properties $duration $timing;
}

// Text truncate
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Flexbox utilities
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

// Grid utilities
@mixin grid-auto-fit($min-width: 250px, $gap: var(--spacing-4)) {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
  gap: $gap;
}

// Shadow utilities
@mixin shadow($level: md) {
  @if $level == sm {
    box-shadow: var(--shadow-sm);
  } @else if $level == md {
    box-shadow: var(--shadow-md);
  } @else if $level == lg {
    box-shadow: var(--shadow-lg);
  } @else if $level == xl {
    box-shadow: var(--shadow-xl);
  }
}